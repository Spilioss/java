// Movie.java 
import java.util.*; 
 
public class Movie implements Printable { 
    private String title; 
    private int year; 
    private List<String> genres; 
    private String director;
    private List<Review> reviews; 
    private List<Movie> relatedMovies; 
 
    public Movie(String title, int year, List<String> genres, String director) { 
        this.title = title; 
        this.year = year; 
        this.genres = new ArrayList<>(genres); 
        this.director = director; 
        this.reviews = new ArrayList< Review >(); 
        this.relatedMovies = new ArrayList< Movie >(); 
    } 
 
    public void addReview(Review r) { 
        reviews.add(r); 
    } 
 
    public void addRelatedMovie(Movie m) { 
        relatedMovies.add(m); 
    } 
 
    public double getAverageRating() { 
        if (reviews.isEmpty()) return 0; 
        int total = 0; 
        for (Review r : reviews) { 
            total += r.getWeightedRating(); 
        } 
        return (double) total / reviews.size(); 
    } 
 
    public void printDetails() { 
        System.out.println("Title: " + title); 
        System.out.println("Year: " + year); 
        System.out.println("Genres: " + genres); 
        System.out.println("Director: " + director); 
        System.out.println("Average Rating: " + getAverageRating()); 
    } 
 
    // Getters and other utility methods can be added here 

    public List<String> getGenres() {
      return genres;
    }

    public String getTitle() {
        return title;
    }

    public int getYear() {
    return year;
}

    //method for sorting movies based on their average rating

    public class MovieRatingComparator implements Comparator<Movie> {
        public int compare(Movie m1, Movie m2) {
            return Double.compare(m2.getAverageRating(), m1.getAverageRating());
        }
    }

    //method for searching movies based on genre 
    //it returns a new list containing only the movies that include this genre

    public class MovieSearch {
        public static List<Movie> searchByGenre(List<Movie> movies, String genre) {
            List<Movie> result = new ArrayList<>();
            for (Movie m : movies) {
                if (m.getGenres().contains(genre)) {
                    result.add(m);
                }
            }
            return result;
        }
    }   

} 
 
